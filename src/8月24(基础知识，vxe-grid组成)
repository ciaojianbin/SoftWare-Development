1.extends以及implements   
   对于extends，可以继承父类的非私有属性以及方法，同时可以对这些方法进行重写
   从而写成自己想要的方法，所以一般会根据公司主营业务需求进行重写某些官方已有的框架。

2.@ApiModel以及@ApiModelProperty,前者作用于实体类上，后者作用于实体类的属性上(一般配合于swagger使用)
         @ApiModel(value = "用户实体类，用户相关字段", description = "用户实体中包含用户相关的所有业务字段，")
         public class User {
         
          @ApiModelProperty("主键")
          private Integer id;
         
          @ApiModelProperty("姓名")
          private String name;
         }
3.FastJson通过在属性上面使用@JsonFiled(name="")来进行属性的Json化，其中默认进行序列化。这个注解一般可以写在get set方法上，并且一般操作是按get
 set方法进行的。其中作用得name字段边是输入和输出的key。


4.前端软件开发规范：使用高级表格vxe-grid进行表格制作，通过ant-design进行框架搭建。vxe-grid主要有四个部分，
      @1首先是formConfig，这是进行表单配置的，和以前那种表单没有任何区别，就是填写框，然后表单填写的数据可以通过formCofig中的data进行绑定，而表单的布局，则是通过formConfig中的items进行的，表单可以使用在表格的最上方，或者使用在模态框中，表单可以配置按钮，通过在vxe-grid或者vxe-form中配置@form-submit的方法，同时设置按钮type为submit，即可绑定方法。除了按钮之外，还有输入框，通过items进行配置，如下：
      items: [
               {
                 span: 18,//共24
                 children: [
                   {
                     field: 'appCode',
                     title: 'fam.appCode',
                     folding: false,//默认值为false，默认收起
                     span: 8,
                     itemRender: { name: '$select', options: applicationList }
                   }, {
                     field: 'sourceType',
                     title: 'fam.sourceType',
                     folding: false,
                     span: 8,
                     itemRender: { name: '$input', props: { placeholder: 'fam.input' }}
                   }, {
                     field: 'ossType',
                     title: 'fam.ossType',
                     folding: false,
                     span: 8,
                     itemRender: { name: '$select', options: storageTypeOptions }
                   }
                 ]
               },
            ]
        上面配置代表为三个输入框，其中itemRender表示为item的渲染，filed属性和formConfig中的data可以绑定，title表示输入框左边的显示，而itemRender里面的name表示渲染器的名字，$input表示输入框,$select表示下拉框。    
      @2其次是toolBarConfig，这是进行表格工具的配置，位于表格的左上方，一般配置为按钮，使用buttons进行配置，例如：
         toolbarConfig: {
            buttons: [//左侧按钮列表
                    {
                      code: 'add',//指令编码
                      name: 'fam.add',
                      icon: 'fa fa-plus'
                    }
                 ]
         }
      在上面我们可以看见，配置了一个按钮，其中code是指令，name是button的名称，icon是按钮的图标，通过code，我们可以在vxe-grid或vxe-form中使用@toolbar-button-click进行方法绑定，使用如下代码进行不同按钮不同方法：
      toolbarButtonClick({ code }) {
        switch (code) {
          case 'add':
            this.insert();
            break
          case 'delete':
            this.delete();
            break
          case 'save':
            this.save();
             break
          case 'cancel':
            this.loadData()//重新加载数据
            break
          default:
            console.log('其他事件')
        }
      }
      @3然后就是表格了，那么表格的配置是和vxe-grid绑定的，其中列项使用colums来配置，如下：
         columns: [//列配项
             {
               type: 'checkbox',
               width: 40,
               align: 'center'
             },
             {
               type: 'seq',
               title: 'fam.seq',
               width: 50,
               align: 'center'
             },
             {
               field: 'appCode',
               title: 'fam.appCode',
               minWidth: 120,
               sortable: true
             },
             ]
       表示配置的为三个列，type表示类型，filed表示和gridOption里面的data的数据绑定，及和后端传送过来数据的字段绑定。
       最后一个就是分页了，分页配置使用pagerConfig，如下：
          pagerConfig: {
             currentPage: 1,
             pageSize: 15,
             total: 0,
             pageSizes: [5, 10, 15, 20, 50, 100, 200, 500, 1000]
           },
      currentPage表示当前页，pageSize表示一页的大小，即一页有多少数据，total表示一共有多少条记录，pageSize表示可以选择的大小。
   
      
